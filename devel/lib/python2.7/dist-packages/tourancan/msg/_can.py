# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tourancan/can.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class can(genpy.Message):
  _md5sum = "ab6878f5a479e92947f700b3b07d7f13"
  _type = "tourancan/can"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 LWI_Sensorstatus
uint8 LWI_StrWhlAngleSt
float32 LWI_StrWhlAngleSize 
uint8 LWI_StrWhlAngleDrt
uint8 LWI_StrWhlSpeedDrt
float32 LWI_StrWhlSpeedSize

float32 Stalls
float32 TargetStalls

uint8 EngineSpeedState
float32 EngineSpeed


uint8 ACCSignalContinuity
float32 Speed 
uint8 ESP_SystemStatus
uint8 SpeedState

float32 LF_WhlSpd
float32 LR_WhlSpd
float32 RF_WhlSpd
float32 RR_WhlSpd

float32 aPedalPercent
uint8 aPedalPercentSt
float32 ThrottleGradientSize
uint8 ThrottleGradientPN
uint8 EngNeutralTorque


uint8 BrakeSwitch

float32 EPSRxHCA_Status
float32 EPS_StrWhlTorque 
uint8 EPS_StrWhlTorqueDrt
uint8 EPS_StrWhlTorqueSt

float32 ExpStrWhlTorque
uint8 HCATranCycle
uint8 ExpStrWhlTorqueDrt
float32 HCA_Status

float32 EngTorqueCoefficient

float32 ThtottlePosition
float32 aPedalPosition

float32 PLA_CRC
float32 PLA_BZ
uint8 PLABrkRqtSt
float32 PLAExpStrWhlAngle
uint8 PLAExpStrWhlAngleDrt
float32 PLARequestStatus
float32 PLABrkTorque
float32 PLABrkDeceleration
uint8 PLABrkEnable
uint8 BrkTrqAndDeceSwt
uint8 PLAParking
float32 PLAPrkDistance
uint8 PLASignalTxCyclic

uint8 YawState
uint8 axState
uint8 ayState
float32 ay 
float32 ax
float32 YawRate
uint8 YawToRight

uint8 BrakePressureState
float32 BrakePressure
float32 LF_WhlSpdDrt
float32 LR_WhlSpdDrt
float32 RF_WhlSpdDrt
float32 RR_WhlSpdDrt



float32 ACC_02CRC
float32 ACC_02BZ
float32 ExpectedSpeed  
float32 SpacingFactor
float32 NoiseAlarm
float32 SetSpacing
uint8 ImageAlarm
float32 ACC02Status


float32 ACC_06CRC
float32 ACC_06BZ
float32 aLowerDeviation
float32 aExpectedValue 
float32 aUpperDeviation
float32 DclrtGradRmdValue
float32 AclrtGradRmdValue
uint8 StartRequest06
uint8 ParkingRequest06
float32 ACC06Status

float32 ACC_07CRC
float32 ACC_07BZ
float32 ParkingDistance
uint8 ParkingRequest07
uint8 StartRequest07
uint8 aExpValue

float32 EPBFaultStatus
float32 EPBSwitch
uint8 EPBSwitchState
float32 EPB_PressingForce
float32 EPB_Status

float32 TSK_status


"""
  __slots__ = ['LWI_Sensorstatus','LWI_StrWhlAngleSt','LWI_StrWhlAngleSize','LWI_StrWhlAngleDrt','LWI_StrWhlSpeedDrt','LWI_StrWhlSpeedSize','Stalls','TargetStalls','EngineSpeedState','EngineSpeed','ACCSignalContinuity','Speed','ESP_SystemStatus','SpeedState','LF_WhlSpd','LR_WhlSpd','RF_WhlSpd','RR_WhlSpd','aPedalPercent','aPedalPercentSt','ThrottleGradientSize','ThrottleGradientPN','EngNeutralTorque','BrakeSwitch','EPSRxHCA_Status','EPS_StrWhlTorque','EPS_StrWhlTorqueDrt','EPS_StrWhlTorqueSt','ExpStrWhlTorque','HCATranCycle','ExpStrWhlTorqueDrt','HCA_Status','EngTorqueCoefficient','ThtottlePosition','aPedalPosition','PLA_CRC','PLA_BZ','PLABrkRqtSt','PLAExpStrWhlAngle','PLAExpStrWhlAngleDrt','PLARequestStatus','PLABrkTorque','PLABrkDeceleration','PLABrkEnable','BrkTrqAndDeceSwt','PLAParking','PLAPrkDistance','PLASignalTxCyclic','YawState','axState','ayState','ay','ax','YawRate','YawToRight','BrakePressureState','BrakePressure','LF_WhlSpdDrt','LR_WhlSpdDrt','RF_WhlSpdDrt','RR_WhlSpdDrt','ACC_02CRC','ACC_02BZ','ExpectedSpeed','SpacingFactor','NoiseAlarm','SetSpacing','ImageAlarm','ACC02Status','ACC_06CRC','ACC_06BZ','aLowerDeviation','aExpectedValue','aUpperDeviation','DclrtGradRmdValue','AclrtGradRmdValue','StartRequest06','ParkingRequest06','ACC06Status','ACC_07CRC','ACC_07BZ','ParkingDistance','ParkingRequest07','StartRequest07','aExpValue','EPBFaultStatus','EPBSwitch','EPBSwitchState','EPB_PressingForce','EPB_Status','TSK_status']
  _slot_types = ['uint8','uint8','float32','uint8','uint8','float32','float32','float32','uint8','float32','uint8','float32','uint8','uint8','float32','float32','float32','float32','float32','uint8','float32','uint8','uint8','uint8','float32','float32','uint8','uint8','float32','uint8','uint8','float32','float32','float32','float32','float32','float32','uint8','float32','uint8','float32','float32','float32','uint8','uint8','uint8','float32','uint8','uint8','uint8','uint8','float32','float32','float32','uint8','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','float32','float32','float32','float32','uint8','uint8','uint8','float32','float32','uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LWI_Sensorstatus,LWI_StrWhlAngleSt,LWI_StrWhlAngleSize,LWI_StrWhlAngleDrt,LWI_StrWhlSpeedDrt,LWI_StrWhlSpeedSize,Stalls,TargetStalls,EngineSpeedState,EngineSpeed,ACCSignalContinuity,Speed,ESP_SystemStatus,SpeedState,LF_WhlSpd,LR_WhlSpd,RF_WhlSpd,RR_WhlSpd,aPedalPercent,aPedalPercentSt,ThrottleGradientSize,ThrottleGradientPN,EngNeutralTorque,BrakeSwitch,EPSRxHCA_Status,EPS_StrWhlTorque,EPS_StrWhlTorqueDrt,EPS_StrWhlTorqueSt,ExpStrWhlTorque,HCATranCycle,ExpStrWhlTorqueDrt,HCA_Status,EngTorqueCoefficient,ThtottlePosition,aPedalPosition,PLA_CRC,PLA_BZ,PLABrkRqtSt,PLAExpStrWhlAngle,PLAExpStrWhlAngleDrt,PLARequestStatus,PLABrkTorque,PLABrkDeceleration,PLABrkEnable,BrkTrqAndDeceSwt,PLAParking,PLAPrkDistance,PLASignalTxCyclic,YawState,axState,ayState,ay,ax,YawRate,YawToRight,BrakePressureState,BrakePressure,LF_WhlSpdDrt,LR_WhlSpdDrt,RF_WhlSpdDrt,RR_WhlSpdDrt,ACC_02CRC,ACC_02BZ,ExpectedSpeed,SpacingFactor,NoiseAlarm,SetSpacing,ImageAlarm,ACC02Status,ACC_06CRC,ACC_06BZ,aLowerDeviation,aExpectedValue,aUpperDeviation,DclrtGradRmdValue,AclrtGradRmdValue,StartRequest06,ParkingRequest06,ACC06Status,ACC_07CRC,ACC_07BZ,ParkingDistance,ParkingRequest07,StartRequest07,aExpValue,EPBFaultStatus,EPBSwitch,EPBSwitchState,EPB_PressingForce,EPB_Status,TSK_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(can, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.LWI_Sensorstatus is None:
        self.LWI_Sensorstatus = 0
      if self.LWI_StrWhlAngleSt is None:
        self.LWI_StrWhlAngleSt = 0
      if self.LWI_StrWhlAngleSize is None:
        self.LWI_StrWhlAngleSize = 0.
      if self.LWI_StrWhlAngleDrt is None:
        self.LWI_StrWhlAngleDrt = 0
      if self.LWI_StrWhlSpeedDrt is None:
        self.LWI_StrWhlSpeedDrt = 0
      if self.LWI_StrWhlSpeedSize is None:
        self.LWI_StrWhlSpeedSize = 0.
      if self.Stalls is None:
        self.Stalls = 0.
      if self.TargetStalls is None:
        self.TargetStalls = 0.
      if self.EngineSpeedState is None:
        self.EngineSpeedState = 0
      if self.EngineSpeed is None:
        self.EngineSpeed = 0.
      if self.ACCSignalContinuity is None:
        self.ACCSignalContinuity = 0
      if self.Speed is None:
        self.Speed = 0.
      if self.ESP_SystemStatus is None:
        self.ESP_SystemStatus = 0
      if self.SpeedState is None:
        self.SpeedState = 0
      if self.LF_WhlSpd is None:
        self.LF_WhlSpd = 0.
      if self.LR_WhlSpd is None:
        self.LR_WhlSpd = 0.
      if self.RF_WhlSpd is None:
        self.RF_WhlSpd = 0.
      if self.RR_WhlSpd is None:
        self.RR_WhlSpd = 0.
      if self.aPedalPercent is None:
        self.aPedalPercent = 0.
      if self.aPedalPercentSt is None:
        self.aPedalPercentSt = 0
      if self.ThrottleGradientSize is None:
        self.ThrottleGradientSize = 0.
      if self.ThrottleGradientPN is None:
        self.ThrottleGradientPN = 0
      if self.EngNeutralTorque is None:
        self.EngNeutralTorque = 0
      if self.BrakeSwitch is None:
        self.BrakeSwitch = 0
      if self.EPSRxHCA_Status is None:
        self.EPSRxHCA_Status = 0.
      if self.EPS_StrWhlTorque is None:
        self.EPS_StrWhlTorque = 0.
      if self.EPS_StrWhlTorqueDrt is None:
        self.EPS_StrWhlTorqueDrt = 0
      if self.EPS_StrWhlTorqueSt is None:
        self.EPS_StrWhlTorqueSt = 0
      if self.ExpStrWhlTorque is None:
        self.ExpStrWhlTorque = 0.
      if self.HCATranCycle is None:
        self.HCATranCycle = 0
      if self.ExpStrWhlTorqueDrt is None:
        self.ExpStrWhlTorqueDrt = 0
      if self.HCA_Status is None:
        self.HCA_Status = 0.
      if self.EngTorqueCoefficient is None:
        self.EngTorqueCoefficient = 0.
      if self.ThtottlePosition is None:
        self.ThtottlePosition = 0.
      if self.aPedalPosition is None:
        self.aPedalPosition = 0.
      if self.PLA_CRC is None:
        self.PLA_CRC = 0.
      if self.PLA_BZ is None:
        self.PLA_BZ = 0.
      if self.PLABrkRqtSt is None:
        self.PLABrkRqtSt = 0
      if self.PLAExpStrWhlAngle is None:
        self.PLAExpStrWhlAngle = 0.
      if self.PLAExpStrWhlAngleDrt is None:
        self.PLAExpStrWhlAngleDrt = 0
      if self.PLARequestStatus is None:
        self.PLARequestStatus = 0.
      if self.PLABrkTorque is None:
        self.PLABrkTorque = 0.
      if self.PLABrkDeceleration is None:
        self.PLABrkDeceleration = 0.
      if self.PLABrkEnable is None:
        self.PLABrkEnable = 0
      if self.BrkTrqAndDeceSwt is None:
        self.BrkTrqAndDeceSwt = 0
      if self.PLAParking is None:
        self.PLAParking = 0
      if self.PLAPrkDistance is None:
        self.PLAPrkDistance = 0.
      if self.PLASignalTxCyclic is None:
        self.PLASignalTxCyclic = 0
      if self.YawState is None:
        self.YawState = 0
      if self.axState is None:
        self.axState = 0
      if self.ayState is None:
        self.ayState = 0
      if self.ay is None:
        self.ay = 0.
      if self.ax is None:
        self.ax = 0.
      if self.YawRate is None:
        self.YawRate = 0.
      if self.YawToRight is None:
        self.YawToRight = 0
      if self.BrakePressureState is None:
        self.BrakePressureState = 0
      if self.BrakePressure is None:
        self.BrakePressure = 0.
      if self.LF_WhlSpdDrt is None:
        self.LF_WhlSpdDrt = 0.
      if self.LR_WhlSpdDrt is None:
        self.LR_WhlSpdDrt = 0.
      if self.RF_WhlSpdDrt is None:
        self.RF_WhlSpdDrt = 0.
      if self.RR_WhlSpdDrt is None:
        self.RR_WhlSpdDrt = 0.
      if self.ACC_02CRC is None:
        self.ACC_02CRC = 0.
      if self.ACC_02BZ is None:
        self.ACC_02BZ = 0.
      if self.ExpectedSpeed is None:
        self.ExpectedSpeed = 0.
      if self.SpacingFactor is None:
        self.SpacingFactor = 0.
      if self.NoiseAlarm is None:
        self.NoiseAlarm = 0.
      if self.SetSpacing is None:
        self.SetSpacing = 0.
      if self.ImageAlarm is None:
        self.ImageAlarm = 0
      if self.ACC02Status is None:
        self.ACC02Status = 0.
      if self.ACC_06CRC is None:
        self.ACC_06CRC = 0.
      if self.ACC_06BZ is None:
        self.ACC_06BZ = 0.
      if self.aLowerDeviation is None:
        self.aLowerDeviation = 0.
      if self.aExpectedValue is None:
        self.aExpectedValue = 0.
      if self.aUpperDeviation is None:
        self.aUpperDeviation = 0.
      if self.DclrtGradRmdValue is None:
        self.DclrtGradRmdValue = 0.
      if self.AclrtGradRmdValue is None:
        self.AclrtGradRmdValue = 0.
      if self.StartRequest06 is None:
        self.StartRequest06 = 0
      if self.ParkingRequest06 is None:
        self.ParkingRequest06 = 0
      if self.ACC06Status is None:
        self.ACC06Status = 0.
      if self.ACC_07CRC is None:
        self.ACC_07CRC = 0.
      if self.ACC_07BZ is None:
        self.ACC_07BZ = 0.
      if self.ParkingDistance is None:
        self.ParkingDistance = 0.
      if self.ParkingRequest07 is None:
        self.ParkingRequest07 = 0
      if self.StartRequest07 is None:
        self.StartRequest07 = 0
      if self.aExpValue is None:
        self.aExpValue = 0
      if self.EPBFaultStatus is None:
        self.EPBFaultStatus = 0.
      if self.EPBSwitch is None:
        self.EPBSwitch = 0.
      if self.EPBSwitchState is None:
        self.EPBSwitchState = 0
      if self.EPB_PressingForce is None:
        self.EPB_PressingForce = 0.
      if self.EPB_Status is None:
        self.EPB_Status = 0.
      if self.TSK_status is None:
        self.TSK_status = 0.
    else:
      self.LWI_Sensorstatus = 0
      self.LWI_StrWhlAngleSt = 0
      self.LWI_StrWhlAngleSize = 0.
      self.LWI_StrWhlAngleDrt = 0
      self.LWI_StrWhlSpeedDrt = 0
      self.LWI_StrWhlSpeedSize = 0.
      self.Stalls = 0.
      self.TargetStalls = 0.
      self.EngineSpeedState = 0
      self.EngineSpeed = 0.
      self.ACCSignalContinuity = 0
      self.Speed = 0.
      self.ESP_SystemStatus = 0
      self.SpeedState = 0
      self.LF_WhlSpd = 0.
      self.LR_WhlSpd = 0.
      self.RF_WhlSpd = 0.
      self.RR_WhlSpd = 0.
      self.aPedalPercent = 0.
      self.aPedalPercentSt = 0
      self.ThrottleGradientSize = 0.
      self.ThrottleGradientPN = 0
      self.EngNeutralTorque = 0
      self.BrakeSwitch = 0
      self.EPSRxHCA_Status = 0.
      self.EPS_StrWhlTorque = 0.
      self.EPS_StrWhlTorqueDrt = 0
      self.EPS_StrWhlTorqueSt = 0
      self.ExpStrWhlTorque = 0.
      self.HCATranCycle = 0
      self.ExpStrWhlTorqueDrt = 0
      self.HCA_Status = 0.
      self.EngTorqueCoefficient = 0.
      self.ThtottlePosition = 0.
      self.aPedalPosition = 0.
      self.PLA_CRC = 0.
      self.PLA_BZ = 0.
      self.PLABrkRqtSt = 0
      self.PLAExpStrWhlAngle = 0.
      self.PLAExpStrWhlAngleDrt = 0
      self.PLARequestStatus = 0.
      self.PLABrkTorque = 0.
      self.PLABrkDeceleration = 0.
      self.PLABrkEnable = 0
      self.BrkTrqAndDeceSwt = 0
      self.PLAParking = 0
      self.PLAPrkDistance = 0.
      self.PLASignalTxCyclic = 0
      self.YawState = 0
      self.axState = 0
      self.ayState = 0
      self.ay = 0.
      self.ax = 0.
      self.YawRate = 0.
      self.YawToRight = 0
      self.BrakePressureState = 0
      self.BrakePressure = 0.
      self.LF_WhlSpdDrt = 0.
      self.LR_WhlSpdDrt = 0.
      self.RF_WhlSpdDrt = 0.
      self.RR_WhlSpdDrt = 0.
      self.ACC_02CRC = 0.
      self.ACC_02BZ = 0.
      self.ExpectedSpeed = 0.
      self.SpacingFactor = 0.
      self.NoiseAlarm = 0.
      self.SetSpacing = 0.
      self.ImageAlarm = 0
      self.ACC02Status = 0.
      self.ACC_06CRC = 0.
      self.ACC_06BZ = 0.
      self.aLowerDeviation = 0.
      self.aExpectedValue = 0.
      self.aUpperDeviation = 0.
      self.DclrtGradRmdValue = 0.
      self.AclrtGradRmdValue = 0.
      self.StartRequest06 = 0
      self.ParkingRequest06 = 0
      self.ACC06Status = 0.
      self.ACC_07CRC = 0.
      self.ACC_07BZ = 0.
      self.ParkingDistance = 0.
      self.ParkingRequest07 = 0
      self.StartRequest07 = 0
      self.aExpValue = 0
      self.EPBFaultStatus = 0.
      self.EPBSwitch = 0.
      self.EPBSwitchState = 0
      self.EPB_PressingForce = 0.
      self.EPB_Status = 0.
      self.TSK_status = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f().pack(_x.LWI_Sensorstatus, _x.LWI_StrWhlAngleSt, _x.LWI_StrWhlAngleSize, _x.LWI_StrWhlAngleDrt, _x.LWI_StrWhlSpeedDrt, _x.LWI_StrWhlSpeedSize, _x.Stalls, _x.TargetStalls, _x.EngineSpeedState, _x.EngineSpeed, _x.ACCSignalContinuity, _x.Speed, _x.ESP_SystemStatus, _x.SpeedState, _x.LF_WhlSpd, _x.LR_WhlSpd, _x.RF_WhlSpd, _x.RR_WhlSpd, _x.aPedalPercent, _x.aPedalPercentSt, _x.ThrottleGradientSize, _x.ThrottleGradientPN, _x.EngNeutralTorque, _x.BrakeSwitch, _x.EPSRxHCA_Status, _x.EPS_StrWhlTorque, _x.EPS_StrWhlTorqueDrt, _x.EPS_StrWhlTorqueSt, _x.ExpStrWhlTorque, _x.HCATranCycle, _x.ExpStrWhlTorqueDrt, _x.HCA_Status, _x.EngTorqueCoefficient, _x.ThtottlePosition, _x.aPedalPosition, _x.PLA_CRC, _x.PLA_BZ, _x.PLABrkRqtSt, _x.PLAExpStrWhlAngle, _x.PLAExpStrWhlAngleDrt, _x.PLARequestStatus, _x.PLABrkTorque, _x.PLABrkDeceleration, _x.PLABrkEnable, _x.BrkTrqAndDeceSwt, _x.PLAParking, _x.PLAPrkDistance, _x.PLASignalTxCyclic, _x.YawState, _x.axState, _x.ayState, _x.ay, _x.ax, _x.YawRate, _x.YawToRight, _x.BrakePressureState, _x.BrakePressure, _x.LF_WhlSpdDrt, _x.LR_WhlSpdDrt, _x.RF_WhlSpdDrt, _x.RR_WhlSpdDrt, _x.ACC_02CRC, _x.ACC_02BZ, _x.ExpectedSpeed, _x.SpacingFactor, _x.NoiseAlarm, _x.SetSpacing, _x.ImageAlarm, _x.ACC02Status, _x.ACC_06CRC, _x.ACC_06BZ, _x.aLowerDeviation, _x.aExpectedValue, _x.aUpperDeviation, _x.DclrtGradRmdValue, _x.AclrtGradRmdValue, _x.StartRequest06, _x.ParkingRequest06, _x.ACC06Status, _x.ACC_07CRC, _x.ACC_07BZ, _x.ParkingDistance, _x.ParkingRequest07, _x.StartRequest07, _x.aExpValue, _x.EPBFaultStatus, _x.EPBSwitch, _x.EPBSwitchState, _x.EPB_PressingForce, _x.EPB_Status, _x.TSK_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 262
      (_x.LWI_Sensorstatus, _x.LWI_StrWhlAngleSt, _x.LWI_StrWhlAngleSize, _x.LWI_StrWhlAngleDrt, _x.LWI_StrWhlSpeedDrt, _x.LWI_StrWhlSpeedSize, _x.Stalls, _x.TargetStalls, _x.EngineSpeedState, _x.EngineSpeed, _x.ACCSignalContinuity, _x.Speed, _x.ESP_SystemStatus, _x.SpeedState, _x.LF_WhlSpd, _x.LR_WhlSpd, _x.RF_WhlSpd, _x.RR_WhlSpd, _x.aPedalPercent, _x.aPedalPercentSt, _x.ThrottleGradientSize, _x.ThrottleGradientPN, _x.EngNeutralTorque, _x.BrakeSwitch, _x.EPSRxHCA_Status, _x.EPS_StrWhlTorque, _x.EPS_StrWhlTorqueDrt, _x.EPS_StrWhlTorqueSt, _x.ExpStrWhlTorque, _x.HCATranCycle, _x.ExpStrWhlTorqueDrt, _x.HCA_Status, _x.EngTorqueCoefficient, _x.ThtottlePosition, _x.aPedalPosition, _x.PLA_CRC, _x.PLA_BZ, _x.PLABrkRqtSt, _x.PLAExpStrWhlAngle, _x.PLAExpStrWhlAngleDrt, _x.PLARequestStatus, _x.PLABrkTorque, _x.PLABrkDeceleration, _x.PLABrkEnable, _x.BrkTrqAndDeceSwt, _x.PLAParking, _x.PLAPrkDistance, _x.PLASignalTxCyclic, _x.YawState, _x.axState, _x.ayState, _x.ay, _x.ax, _x.YawRate, _x.YawToRight, _x.BrakePressureState, _x.BrakePressure, _x.LF_WhlSpdDrt, _x.LR_WhlSpdDrt, _x.RF_WhlSpdDrt, _x.RR_WhlSpdDrt, _x.ACC_02CRC, _x.ACC_02BZ, _x.ExpectedSpeed, _x.SpacingFactor, _x.NoiseAlarm, _x.SetSpacing, _x.ImageAlarm, _x.ACC02Status, _x.ACC_06CRC, _x.ACC_06BZ, _x.aLowerDeviation, _x.aExpectedValue, _x.aUpperDeviation, _x.DclrtGradRmdValue, _x.AclrtGradRmdValue, _x.StartRequest06, _x.ParkingRequest06, _x.ACC06Status, _x.ACC_07CRC, _x.ACC_07BZ, _x.ParkingDistance, _x.ParkingRequest07, _x.StartRequest07, _x.aExpValue, _x.EPBFaultStatus, _x.EPBSwitch, _x.EPBSwitchState, _x.EPB_PressingForce, _x.EPB_Status, _x.TSK_status,) = _get_struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f().pack(_x.LWI_Sensorstatus, _x.LWI_StrWhlAngleSt, _x.LWI_StrWhlAngleSize, _x.LWI_StrWhlAngleDrt, _x.LWI_StrWhlSpeedDrt, _x.LWI_StrWhlSpeedSize, _x.Stalls, _x.TargetStalls, _x.EngineSpeedState, _x.EngineSpeed, _x.ACCSignalContinuity, _x.Speed, _x.ESP_SystemStatus, _x.SpeedState, _x.LF_WhlSpd, _x.LR_WhlSpd, _x.RF_WhlSpd, _x.RR_WhlSpd, _x.aPedalPercent, _x.aPedalPercentSt, _x.ThrottleGradientSize, _x.ThrottleGradientPN, _x.EngNeutralTorque, _x.BrakeSwitch, _x.EPSRxHCA_Status, _x.EPS_StrWhlTorque, _x.EPS_StrWhlTorqueDrt, _x.EPS_StrWhlTorqueSt, _x.ExpStrWhlTorque, _x.HCATranCycle, _x.ExpStrWhlTorqueDrt, _x.HCA_Status, _x.EngTorqueCoefficient, _x.ThtottlePosition, _x.aPedalPosition, _x.PLA_CRC, _x.PLA_BZ, _x.PLABrkRqtSt, _x.PLAExpStrWhlAngle, _x.PLAExpStrWhlAngleDrt, _x.PLARequestStatus, _x.PLABrkTorque, _x.PLABrkDeceleration, _x.PLABrkEnable, _x.BrkTrqAndDeceSwt, _x.PLAParking, _x.PLAPrkDistance, _x.PLASignalTxCyclic, _x.YawState, _x.axState, _x.ayState, _x.ay, _x.ax, _x.YawRate, _x.YawToRight, _x.BrakePressureState, _x.BrakePressure, _x.LF_WhlSpdDrt, _x.LR_WhlSpdDrt, _x.RF_WhlSpdDrt, _x.RR_WhlSpdDrt, _x.ACC_02CRC, _x.ACC_02BZ, _x.ExpectedSpeed, _x.SpacingFactor, _x.NoiseAlarm, _x.SetSpacing, _x.ImageAlarm, _x.ACC02Status, _x.ACC_06CRC, _x.ACC_06BZ, _x.aLowerDeviation, _x.aExpectedValue, _x.aUpperDeviation, _x.DclrtGradRmdValue, _x.AclrtGradRmdValue, _x.StartRequest06, _x.ParkingRequest06, _x.ACC06Status, _x.ACC_07CRC, _x.ACC_07BZ, _x.ParkingDistance, _x.ParkingRequest07, _x.StartRequest07, _x.aExpValue, _x.EPBFaultStatus, _x.EPBSwitch, _x.EPBSwitchState, _x.EPB_PressingForce, _x.EPB_Status, _x.TSK_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 262
      (_x.LWI_Sensorstatus, _x.LWI_StrWhlAngleSt, _x.LWI_StrWhlAngleSize, _x.LWI_StrWhlAngleDrt, _x.LWI_StrWhlSpeedDrt, _x.LWI_StrWhlSpeedSize, _x.Stalls, _x.TargetStalls, _x.EngineSpeedState, _x.EngineSpeed, _x.ACCSignalContinuity, _x.Speed, _x.ESP_SystemStatus, _x.SpeedState, _x.LF_WhlSpd, _x.LR_WhlSpd, _x.RF_WhlSpd, _x.RR_WhlSpd, _x.aPedalPercent, _x.aPedalPercentSt, _x.ThrottleGradientSize, _x.ThrottleGradientPN, _x.EngNeutralTorque, _x.BrakeSwitch, _x.EPSRxHCA_Status, _x.EPS_StrWhlTorque, _x.EPS_StrWhlTorqueDrt, _x.EPS_StrWhlTorqueSt, _x.ExpStrWhlTorque, _x.HCATranCycle, _x.ExpStrWhlTorqueDrt, _x.HCA_Status, _x.EngTorqueCoefficient, _x.ThtottlePosition, _x.aPedalPosition, _x.PLA_CRC, _x.PLA_BZ, _x.PLABrkRqtSt, _x.PLAExpStrWhlAngle, _x.PLAExpStrWhlAngleDrt, _x.PLARequestStatus, _x.PLABrkTorque, _x.PLABrkDeceleration, _x.PLABrkEnable, _x.BrkTrqAndDeceSwt, _x.PLAParking, _x.PLAPrkDistance, _x.PLASignalTxCyclic, _x.YawState, _x.axState, _x.ayState, _x.ay, _x.ax, _x.YawRate, _x.YawToRight, _x.BrakePressureState, _x.BrakePressure, _x.LF_WhlSpdDrt, _x.LR_WhlSpdDrt, _x.RF_WhlSpdDrt, _x.RR_WhlSpdDrt, _x.ACC_02CRC, _x.ACC_02BZ, _x.ExpectedSpeed, _x.SpacingFactor, _x.NoiseAlarm, _x.SetSpacing, _x.ImageAlarm, _x.ACC02Status, _x.ACC_06CRC, _x.ACC_06BZ, _x.aLowerDeviation, _x.aExpectedValue, _x.aUpperDeviation, _x.DclrtGradRmdValue, _x.AclrtGradRmdValue, _x.StartRequest06, _x.ParkingRequest06, _x.ACC06Status, _x.ACC_07CRC, _x.ACC_07BZ, _x.ParkingDistance, _x.ParkingRequest07, _x.StartRequest07, _x.aExpValue, _x.EPBFaultStatus, _x.EPBSwitch, _x.EPBSwitchState, _x.EPB_PressingForce, _x.EPB_Status, _x.TSK_status,) = _get_struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f = None
def _get_struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f():
    global _struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f
    if _struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f is None:
        _struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f = struct.Struct("<2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f")
    return _struct_2Bf2B3fBfBf2B5fBf3B2f2Bf2B6fBfB3f3Bf4B3f2B11fB8f2B4f3B2fB3f
